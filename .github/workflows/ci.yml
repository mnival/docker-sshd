---
name: CI/CD
'on':
  pull_request:
  push:
    branches:
      - stable

jobs:
  hadolint:
    name: Test dockerfile syntax
    runs-on: ubuntu-latest
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3

      - name: Run hadolint.
        uses: hadolint/hadolint-action@v2.0.0
        with:
          dockerfile: Dockerfile
          ignore: DL3018

  build:
    name: Build and test docker
    permissions:
      contents: read
      id-token: write

    runs-on: ubuntu-latest
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3

      - name: Repository Name
        id: repository
        run: echo "name=${GITHUB_REPOSITORY#*/}" >> ${GITHUB_OUTPUT}

      - name: Vault
        uses: hashicorp/vault-action@v2
        id: vault
        with:
          url: ${{ secrets.VAULT_URL }}
          role: ${{ steps.repository.outputs.name }}
          method: jwt
          exportToken: true
          secrets: |
            kv/data/GitHub $.$ | QUAYIO_ALL

      - name: Add mask
        run: |
          python .github/scripts/add-mask.py '${{ steps.vault.outputs.QUAYIO_ALL }}'

      - name: Find an open port.
        run: |
          # https://superuser.com/questions/885414/linux-command-get-unused-port
          CLIENT_PORT="$(python -c "import socket; s = socket.socket(); s.bind(('', 0));print(s.getsockname()[1]);s.close()")"
          echo '${{ steps.vault.outputs.QUAYIO_ALL }}' | jq -r .
          echo "CLIENT_PORT=$CLIENT_PORT" >> $GITHUB_ENV

      - name: Build docker image.
        run: docker build --no-cache --tag ${GITHUB_REPOSITORY}:${GITHUB_RUN_ID} .

      - name: Run a container of created image.
        run: |
          DOCKERCONTAINER=$(docker run -d -p 127.0.0.1:${CLIENT_PORT}:22 -e SSH_USERS="test:1000:1000" ${GITHUB_REPOSITORY}:${GITHUB_RUN_ID})
          sleep 5
          echo "DOCKERCONTAINER=$DOCKERCONTAINER" >> $GITHUB_ENV

      - name: Check if container is still running.
        run: docker ps -f id=${DOCKERCONTAINER}

      - name: Check if the port is responding.
        run: printf "QUIT\n" | curl --fail -s telnet://127.0.0.1:${CLIENT_PORT} | egrep SSH

      - name: Check if the container is correctly stopped and removed.
        run: docker stop ${DOCKERCONTAINER} && docker rm -fv ${DOCKERCONTAINER}

      - name: Run Trivy vulnerability scanner.
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ github.repository }}:${{ github.run_id }}
          exit-code: '1'

      - name: Revoke token
        # This step always runs at the end regardless of the previous steps result
        if: always()
        run: |
          curl --fail -X POST -s -H "X-Vault-Token: ${{ env.VAULT_TOKEN }}" --write-out "%{http_code}" \
            ${{ secrets.VAULT_URL }}/v1/auth/token/revoke-self

  deploy:
    if: ${{ github.ref == 'refs/heads/stable' }}
    needs: [hadolint, build]
    name: Push to Quay
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Quay
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Push to Quay
        uses: docker/build-push-action@v3
        with:
          file: ./Dockerfile
          pull: true
          push: true
          tags: quay.io/mnival/sshd:latest
